#!/bin/sh

CONFIG_FILE="/opt/clash/config.yaml"

# Function to log messages
msg() {
    logger -p daemon.info -st "clash-rules[$$]" "$*"
}

# Function to check if a string is a valid IP address
is_valid_ip() {
    local ip="$1"
    # Check if it's a valid IPv4 address
    echo "$ip" | grep -qE '^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'
}

# Function to resolve domain name to IP addresses
resolve_domain() {
    local domain="$1"
    local resolved_ips=""

    # Use nslookup to resolve the domain
    if command -v nslookup >/dev/null 2>&1; then
        resolved_ips=$(nslookup "$domain" 2>/dev/null | awk '/^Address: / { print $2 }' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$')
    fi

    # If nslookup failed or not available, try using getent
    if [ -z "$resolved_ips" ] && command -v getent >/dev/null 2>&1; then
        resolved_ips=$(getent hosts "$domain" 2>/dev/null | awk '{print $1}' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$')
    fi

    # If getent failed or not available, try using wget
    if [ -z "$resolved_ips" ] && command -v wget >/dev/null 2>&1; then
        resolved_ips=$(wget -T 5 -t 1 --spider "$domain" 2>&1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
    fi

    # If all failed, try using ping (fallback)
    if [ -z "$resolved_ips" ] && command -v ping >/dev/null 2>&1; then
        resolved_ips=$(ping -c 1 -W 2 "$domain" 2>/dev/null | head -1 | grep -oE '\([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\)' | tr -d '()')
    fi

    # Ensure each IP is on a separate line and remove duplicates
    if [ -n "$resolved_ips" ]; then
        echo "$resolved_ips" | tr ' ' '\n' | grep -v '^$' | sort -u
    fi
}

# Extract server IPs from config.yaml
extract_server_ips() {
    if [ ! -f "$CONFIG_FILE" ]; then
        msg "ERROR: Config file not found: $CONFIG_FILE"
        return 1
    fi

    local all_ips=""

    # Extract servers using awk
    local servers=$(awk '
    /^proxies:/ { in_proxies = 1; next }
    /^[a-zA-Z]/ && !/^  / { in_proxies = 0 }
    in_proxies && /server:/ {
        gsub(/^[[:space:]]*server:[[:space:]]*/, "")
        gsub(/[[:space:]]*$/, "")
        sub(/#.*/, "")
        print $0
    }
    ' "$CONFIG_FILE")

    # Process each server entry
    if [ -n "$servers" ]; then
        echo "$servers" | while IFS= read -r server; do
            [ -z "$server" ] && continue

            if is_valid_ip "$server"; then
                # It's already an IP address
                echo "$server"
            else
                # It's a domain name, resolve it
                resolved_ips=$(resolve_domain "$server")
                if [ -n "$resolved_ips" ]; then
                    echo "$resolved_ips"
                else
                    msg "WARNING: Could not resolve domain: $server"
                fi
            fi
        done
    fi
}

# Function to get list of non-local network interfaces (WAN, etc.)
get_non_local_interfaces() {
    # Get all active interfaces, excluding our local patterns
    ip link show up | awk -F': ' '
    !/^[0-9]+: (br-lan|lan|eth|wlan|phy)/ && /^[0-9]+: [a-zA-Z]/ { print $2 }
    ' | cut -d'@' -f1 | sort -u
}

# For nftables - apply rules for non-local network interfaces
apply_nft_interface_rules() {
    local non_local_interfaces
    non_local_interfaces=$(get_non_local_interfaces)

    if [ -n "$non_local_interfaces" ]; then
        msg "Found non-local network interfaces: $(echo "$non_local_interfaces" | tr '\n' ' ')"
        # Add RETURN rules for non-local network interfaces
        echo "$non_local_interfaces" | while IFS= read -r iface; do
            [ -n "$iface" ] && nft add rule ip clash prerouting iifname "$iface" return
        done
    else
        msg "No non-local network interfaces found"
    fi
}

# For iptables - apply rules for non-local network interfaces
apply_iptables_interface_rules() {
    local non_local_interfaces
    non_local_interfaces=$(get_non_local_interfaces)

    if [ -n "$non_local_interfaces" ]; then
        msg "Found non-local network interfaces: $(echo "$non_local_interfaces" | tr '\n' ' ')"
        # Add RETURN rules for non-local network interfaces
        echo "$non_local_interfaces" | while IFS= read -r iface; do
            [ -n "$iface" ] && iptables -t mangle -A CLASH -i "$iface" -j RETURN
        done
    else
        msg "No non-local network interfaces found"
    fi
}

# Apply nftables rules dynamically
apply_nft_rules() {
    local server_ips="$1"

    # Delete existing table
    nft delete table ip clash 2>/dev/null

    # Create table and chains
    nft add table ip clash
    nft add chain ip clash prerouting '{ type filter hook prerouting priority dstnat + 1; policy accept; }'
    nft add chain ip clash output '{ type route hook output priority mangle; policy accept; }'

    # Process only traffic from local interfaces (dynamic detection)
    apply_nft_interface_rules

    # Exclude packets already marked by Clash
    nft add rule ip clash prerouting meta mark 0x0002 return
    nft add rule ip clash output meta mark 0x0002 return

    # Prevent already marked packets from re-entering
    nft add rule ip clash prerouting meta mark and 0xff00 != 0 return
    nft add rule ip clash output meta mark and 0xff00 != 0 return

    # Block QUIC first (for YouTube)
    nft add rule ip clash prerouting udp dport 443 reject

    # Exclude Clash process itself (by user ID if available)
    nft add rule ip clash output meta skuid 0 return

    # Exclude server IPs (both source and destination)
    if [ -n "$server_ips" ]; then
        echo "$server_ips" | while IFS= read -r ip; do
            [ -n "$ip" ] && {
                nft add rule ip clash prerouting ip saddr "$ip/32" return
                nft add rule ip clash prerouting ip daddr "$ip/32" return
                nft add rule ip clash output ip saddr "$ip/32" return
                nft add rule ip clash output ip daddr "$ip/32" return
            }
        done
    fi

    # Exclude specific ports used by Clash
    nft add rule ip clash prerouting tcp dport {7890, 7891, 7892, 7893, 7894} return
    nft add rule ip clash prerouting udp dport {7890, 7891, 7892, 7893, 7894} return
    nft add rule ip clash output tcp sport {7890, 7891, 7892, 7893, 7894} return
    nft add rule ip clash output udp sport {7890, 7891, 7892, 7893, 7894} return

    # TPROXY rules with mark to prevent loops
    nft add rule ip clash prerouting ip protocol tcp tproxy to 127.0.0.1:7894 meta mark set 0x0001
    nft add rule ip clash prerouting ip protocol udp tproxy to 127.0.0.1:7894 meta mark set 0x0001

    # Mark packets for routing (only if not already marked)
    nft add rule ip clash output meta mark 0 ip protocol tcp meta mark set 0x0001
    nft add rule ip clash output meta mark 0 ip protocol udp meta mark set 0x0001

    msg "nftables rules applied successfully"
}

start() {
    msg "Starting Clash rules script"

    local server_ips
    server_ips=$(extract_server_ips)

    if [ $? -eq 0 ] && [ -n "$server_ips" ]; then
        msg "Extracted server IPs: $(echo "$server_ips" | tr '\n' ' ')"
    else
        msg "WARNING: No server IPs extracted from config"
    fi

    if hash nft 2>/dev/null; then
        msg "Using nftables for traffic redirection"
        # Apply nftables rules dynamically
        apply_nft_rules "$server_ips"
        ip route add local default dev lo table 100
        ip rule add fwmark 0x0001 table 100
    elif hash iptables 2>/dev/null; then
        msg "Using iptables for traffic redirection"
        # Create chains
        iptables -t mangle -N CLASH 2>/dev/null
        iptables -t mangle -N CLASH_LOCAL 2>/dev/null

        # Process only traffic from local interfaces (dynamic detection)
        apply_iptables_interface_rules

        # Exclude packets already marked by Clash
        iptables -t mangle -A CLASH -m mark --mark 0x0002 -j RETURN

        # Prevent already marked packets
        iptables -t mangle -A CLASH -m mark --mark 0xff00/0xff00 -j RETURN

        # Block QUIC first (for YouTube)
        iptables -t filter -I INPUT -p udp --dport 443 -j REJECT 2>/dev/null
        iptables -t filter -I FORWARD -p udp --dport 443 -j REJECT 2>/dev/null

        # Exclude server IPs in CLASH (both source and destination)
        if [ -n "$server_ips" ]; then
            echo "$server_ips" | while IFS= read -r ip; do
                [ -n "$ip" ] && {
                    iptables -t mangle -A CLASH -d "$ip/32" -j RETURN
                    iptables -t mangle -A CLASH -s "$ip/32" -j RETURN
                }
            done
        fi

        # Exclude specific ports used by Clash
        iptables -t mangle -A CLASH -p tcp --dport 7890:7894 -j RETURN
        iptables -t mangle -A CLASH -p udp --dport 7890:7894 -j RETURN
        iptables -t mangle -A CLASH -p tcp --sport 7890:7894 -j RETURN
        iptables -t mangle -A CLASH -p udp --sport 7890:7894 -j RETURN

        # TPROXY rules with mark to prevent loops
        iptables -t mangle -A CLASH -p tcp -j TPROXY --on-ip 127.0.0.1 --on-port 7894 --tproxy-mark 0x0001
        iptables -t mangle -A CLASH -p udp -j TPROXY --on-ip 127.0.0.1 --on-port 7894 --tproxy-mark 0x0001
        iptables -t mangle -A PREROUTING -j CLASH

        # Exclude server IPs in CLASH_LOCAL (both source and destination)
        if [ -n "$server_ips" ]; then
            echo "$server_ips" | while IFS= read -r ip; do
                [ -n "$ip" ] && {
                    iptables -t mangle -A CLASH_LOCAL -d "$ip/32" -j RETURN
                    iptables -t mangle -A CLASH_LOCAL -s "$ip/32" -j RETURN
                }
            done
        fi

        # Exclude specific ports used by Clash
        iptables -t mangle -A CLASH_LOCAL -p tcp --dport 7890:7894 -j RETURN
        iptables -t mangle -A CLASH_LOCAL -p udp --dport 7890:7894 -j RETURN
        iptables -t mangle -A CLASH_LOCAL -p tcp --sport 7890:7894 -j RETURN
        iptables -t mangle -A CLASH_LOCAL -p udp --sport 7890:7894 -j RETURN

        # Exclude packets already marked by Clash
        iptables -t mangle -A CLASH_LOCAL -m mark --mark 0x0002 -j RETURN

        # Prevent already marked packets
        iptables -t mangle -A CLASH_LOCAL -m mark --mark 0xff00/0xff00 -j RETURN

        # Mark packets for routing (only unmarked packets)
        iptables -t mangle -A CLASH_LOCAL -m mark --mark 0 -p tcp -j MARK --set-mark 0x0001
        iptables -t mangle -A CLASH_LOCAL -m mark --mark 0 -p udp -j MARK --set-mark 0x0001
        iptables -t mangle -A OUTPUT -j CLASH_LOCAL

        ip route add local default dev lo table 100
        ip rule add fwmark 0x0001 table 100

        msg "iptables rules applied successfully"
    else
        msg "ERROR: Neither nftables nor iptables found"
        return 1
    fi

    msg "Clash rules script started successfully"
}

stop() {
    msg "Stopping Clash rules script"

    if hash nft 2>/dev/null; then
        nft delete table ip clash 2>/dev/null
        ip route del local default dev lo table 100 2>/dev/null
        ip rule del fwmark 0x0001 table 100 2>/dev/null
        msg "nftables rules removed successfully"
    elif hash iptables 2>/dev/null; then
        iptables -t filter -D INPUT -p udp --dport 443 -j REJECT 2>/dev/null
        iptables -t filter -D FORWARD -p udp --dport 443 -j REJECT 2>/dev/null
        iptables -t mangle -D PREROUTING -j CLASH 2>/dev/null
        iptables -t mangle -F CLASH 2>/dev/null
        iptables -t mangle -X CLASH 2>/dev/null
        iptables -t mangle -D OUTPUT -j CLASH_LOCAL 2>/dev/null
        iptables -t mangle -F CLASH_LOCAL 2>/dev/null
        iptables -t mangle -X CLASH_LOCAL 2>/dev/null
        ip route del local default dev lo table 100 2>/dev/null
        ip rule del fwmark 0x0001 table 100 2>/dev/null
        msg "iptables rules removed successfully"
    else
        msg "ERROR: Neither nftables nor iptables found"
        return 1
    fi

    msg "Clash rules script stopped successfully"
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    *)
        echo "Usage: $0 {start|stop}"
        exit 1
        ;;
esac
